// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model order {
  id        Int       @id   @default(autoincrement())
  orderDate DateTime

  providerId  Int
  provider    provider @relation(fields: [providerId], references: [id])

  orderDetails orderDetails[]
}

model provider {
  id          Int       @id   @default(autoincrement())
  name        String    @unique
  
  order order[]
}

model orderDetails {
  id              Int       @id   @default(autoincrement())
  price           Float
  shippingCost    Float
  OrderQuantity   Int
  ExpectedDate    DateTime

  orderId         Int
  order           order @relation(fields: [orderId], references: [id])

  productId       Int
  product         product @relation(fields: [productId], references: [id])

  addressId       Int
  address         address @relation(fields: [addressId], references: [id])

  warehouseId     Int
  warehouse       warehouse @relation(fields: [warehouseId], references: [id])
}

model product {
  id              Int       @id   @default(autoincrement())
  name            String
  barcode         String   @unique
  unitPrice       Float
  width           Float
  height          Float
  depth           Float
  Weight          Float
  Expiration      Boolean
  ExpirationDate  DateTime?

  orderDetails orderDetails[]

  inventory inventory[]

  deliveryDetails deliveryDetails[]
}

model delivery {
  id              Int       @id   @default(autoincrement())
  orderDate       DateTime

  userId      Int
  user        user @relation(fields: [userId], references: [id])

  deliveryDetails deliveryDetails[]
}

model deliveryDetails {
  id              Int       @id   @default(autoincrement())
  price           Float
  shippingCost    Float
  OrderQuantity   Int
  ExpectedDate    DateTime

  productId       Int
  product         product @relation(fields: [productId], references: [id])

  deliveryId      Int
  delivery        delivery @relation(fields: [deliveryId], references: [id])

  warehouseId     Int
  warehouse       warehouse @relation(fields: [warehouseId], references: [id])

  addressId       Int
  address         address @relation(fields: [addressId], references: [id])
}

model warehouse {
  id              Int       @id   @default(autoincrement())
  capacity        Boolean

  addressId       Int
  address         address @relation(fields: [addressId], references: [id])

  warehouseOnAdmin warehouseOnAdmin[]

  inventory inventory[]

  orderDetails orderDetails[]

  deliveryDetails deliveryDetails[]
}

model inventory {
  id              Int       @id   @default(autoincrement())
  quantity        Int
  available       Boolean
  reorderPoint    Int

  productId       Int
  product         product   @relation(fields: [productId], references: [id])

  warehouseId     Int
  warehouse       warehouse @relation(fields: [warehouseId], references: [id])
}

model warehouseOnAdmin{
  warehouseId     Int
  warehouse       warehouse @relation(fields: [warehouseId], references: [id])

  userId            Int
  user              user @relation(fields: [userId], references: [id])

  @@id([warehouseId, userId])
}

model user {
  id              Int       @id   @default(autoincrement())
  email           String    @unique
  password        String
  role            Role      @default(CUSTOMER)

  firstName       String?
  lastName        String?
  phoneNumber     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address address[]
  delivery delivery[]
  warehouseOnAdmin warehouseOnAdmin[]
}

model address {
  id          Int      @id @default(autoincrement())
  street      String
  city        String
  state       String
  postalCode  String
  country     String

  userId      Int?
  user        user?     @relation(fields: [userId], references: [id])

  // Relationships
  delivery      deliveryDetails[]

  warehouse warehouse[]

  orderDetails orderDetails[]
}

enum Role {
  ADMIN
  CUSTOMER
}